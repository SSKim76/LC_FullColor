;	/*********************************************************************************************************
;
;		UART
;
;	*********************************************************************************************************/
;
;	#define DATA_REGISTER_EMPTY (1<<UDRE)
;	#define RX_COMPLETE (1<<RXC)
;	#define FRAMING_ERROR (1<<FE)
;	#define PARITY_ERROR (1<<UPE)
;	#define DATA_OVERRUN (1<<DOR)
;
;
;	// USART Receiver buffer
;
;
;	// This flag is set on USART Receiver buffer overflow
;	bit rx_buffer_overflow;
;
;
;    void putchar0(char c)
; 0003 0016     {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0003 0017         while ((UCSRA & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000002 VOL: 0
;	c -> Y+0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
; 0003 0018         UDR=c;
;PCODE: $0000000A VOL: 0
; 0003 0019     }
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;
;
;
;	// USART Receiver interrupt service routine
;	interrupt [USART_RXC] void usart_rx_isr(void)
; 0003 001F 	{
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0003 0020 			char status,data;
; 0003 0021 			status=UCSRA;
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0003 0022 			data=UDR;
;PCODE: $00000012 VOL: 0
; 0003 0023 
; 0003 0024 			if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0003 0025 			   {
; 0003 0026 						UART0_DATA=data;
;PCODE: $00000021 VOL: 0
; 0003 0027 
; 0003 0028                       //  if(UART0_DATA =="STX" )                                          // UART0_DATA가 STX 일 경우.. ...
; 0003 0029                         if(UART0_DATA == 0x02)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0003 002A                         {
; 0003 002B                                 NDX_232 = 0;
;PCODE: $00000024 VOL: 0
; 0003 002C                                 RS232_FLAG = 1;
;PCODE: $00000025 VOL: 0
; 0003 002D                         }
; 0003 002E 
; 0003 002F                         if(RS232_FLAG)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0003 0030                         {
; 0003 0031                                 if(UART0_DATA == 0x02)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0003 0032                                 {
; 0003 0033                                         RS232_BUFF[NDX_232] =   UART0_DATA;
;PCODE: $0000002B VOL: 0
; 0003 0034                                 }
; 0003 0035                                 else
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 0036                                 {
; 0003 0037                                         RS232_BUFF[++NDX_232] =   UART0_DATA;
;PCODE: $0000002E VOL: 0
; 0003 0038                                 }
;PCODE: $0000002F VOL: 0
; 0003 0039 
; 0003 003A 
; 0003 003B                                 if(UART0_DATA ==  0x03)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0003 003C                                 {
; 0003 003D                                           SELECT_Light(RS232_BUFF);                                                      ...
; 0003 003E 					  memset(RS232_BUFF,0x00,sizeof(RS232_BUFF));         //Buf 초기화
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0003 003F 
; 0003 0040                                           for(UART_CNT = 0; UART_CNT <=  NDX_232 ; UART_CNT++)
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0003 0041                                           {
;PCODE: $0000003E VOL: 0
; 0003 0042                                                 putchar0( RS232_BUFF[UART_CNT]);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0043                                           }
;PCODE: $00000041 VOL: 0
; 0003 0044 
; 0003 0045                                           RS232_FLAG = 0;
;PCODE: $00000042 VOL: 0
; 0003 0046                                           NDX_232 = 0;
;PCODE: $00000043 VOL: 0
; 0003 0047 
; 0003 0048                                 }	        // END of if(UART0_DATA ==  0x03)
; 0003 0049                         }	                // END of  if(RS232_FLAG)
;PCODE: $00000044 VOL: 0
; 0003 004A 
; 0003 004B                       UART0_DATA = 0;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0003 004C 
; 0003 004D 		   }	        // END of if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
; 0003 004E 	}                       // END of 	interrupt [USART_RXC] void usart_rx_isr(void)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
