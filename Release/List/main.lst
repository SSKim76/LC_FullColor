
AVRASM ver. 2.1.30  D:\[AVR]\2018.06 - Full_Color_Half_Light_Controller_R03_抗寇贸府\MCU\Code\Release\List\main.asm Tue Jul 03 14:48:50 2018

D:\[AVR]\2018.06 - Full_Color_Half_Light_Controller_R03_抗寇贸府\MCU\Code\Release\List\main.asm(991): warning: Register r3 already defined by the .DEF directive
D:\[AVR]\2018.06 - Full_Color_Half_Light_Controller_R03_抗寇贸府\MCU\Code\Release\List\main.asm(992): warning: Register r2 already defined by the .DEF directive
D:\[AVR]\2018.06 - Full_Color_Half_Light_Controller_R03_抗寇贸府\MCU\Code\Release\List\main.asm(993): warning: Register r5 already defined by the .DEF directive
D:\[AVR]\2018.06 - Full_Color_Half_Light_Controller_R03_抗寇贸府\MCU\Code\Release\List\main.asm(994): warning: Register r4 already defined by the .DEF directive
D:\[AVR]\2018.06 - Full_Color_Half_Light_Controller_R03_抗寇贸府\MCU\Code\Release\List\main.asm(995): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATtiny2313
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 32 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _UART0_DATA=R3
                 	.DEF _NDX_232=R2
                 	.DEF _default_Color=R5
                 	.DEF _Tmr_Cnt=R4
                 	.DEF _RS232_RS_Limit=R7
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c06f      	RJMP _timer1_ovf_isr
000006 cff9      	RJMP 0x00
000007 c0a1      	RJMP _usart_rx_isr
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G100:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001c 0000
00001d 0300      	.DB  0x0,0x0,0x0,0x3
00001e 0600      	.DB  0x0,0x6
                 
                 _0x3:
00001f 021b
000020 0052
000021 0000
000022 0300      	.DB  0x1B,0x2,0x52,0x0,0x0,0x0,0x0,0x3
D:\[AVR]\2018.06 - Full_Color_Half_Light_Controller_R03_抗寇贸府\MCU\Code\Release\List\main.asm(1042): warning: .cseg .db misalignment - padding zero byte
000023 000d      	.DB  0xD
                 
                 __GLOBAL_INI_TBL:
000024 0006      	.DW  0x06
000025 0002      	.DW  0x02
000026 0038      	.DW  __REG_VARS*2
                 
000027 0009      	.DW  0x09
000028 008a      	.DW  _rtnMsg
000029 003e      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00002a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002b 94f8      	CLI
00002c 27ee      	CLR  R30
00002d bbec      	OUT  EECR,R30
00002e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00002f e08d      	LDI  R24,(14-2)+1
000030 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000031 93ed      	ST   X+,R30
000032 958a      	DEC  R24
000033 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000034 e880      	LDI  R24,__CLEAR_SRAM_SIZE
000035 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000036 93ed      	ST   X+,R30
000037 958a      	DEC  R24
000038 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000039 e4e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003b 9185      	LPM  R24,Z+
00003c 9195      	LPM  R25,Z+
00003d 9700      	SBIW R24,0
00003e f061      	BREQ __GLOBAL_INI_END
00003f 91a5      	LPM  R26,Z+
000040 91b5      	LPM  R27,Z+
000041 9005      	LPM  R0,Z+
000042 9015      	LPM  R1,Z+
000043 01bf      	MOVW R22,R30
000044 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000045 9005      	LPM  R0,Z+
000046 920d      	ST   X+,R0
000047 9701      	SBIW R24,1
000048 f7e1      	BRNE __GLOBAL_INI_LOOP
000049 01fb      	MOVW R30,R22
00004a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00004b e0e0      	LDI  R30,__GPIOR0_INIT
00004c bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
00004d bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
00004e bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004f edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000050 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000051 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000052 c0c9      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;	#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;    #include <stdio.h>
                 ;	#include <delay.h>
                 ;	#include <string.h>
                 ;
                 ;
                 ;
                 ;void SELECT_Light(unsigned char *USER_SELECT);
                 ;void Clear_Set();
                 ;void CHK_Light();
                 ;
                 ;
                 ;
                 ;#include "DEFINE.c"
                 ;/*************************************************************************************
                 ;		01. DEFINE.c
                 ;
                 ;*************************************************************************************/
                 ;
                 ;#define F_CPU   20000000
                 ;
                 ;unsigned char		    UART0_DATA		=	0;
                 ;char				    RS232_BUFF[10];
                 ;unsigned char           NDX_232 		=	0;
                 ;bit 				    RS232_FLAG  	=   0;
                 ;bit 				    RS_Finish_Flag  =   0;
                 ;
                 ;unsigned char	        default_Color   =   0x03;	// Amber
                 ;char                    rtnMsg[9]       =   {0x1B, 0x02, 0x52, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D};
                 
                 	.DSEG
                 ;
                 ;//unsigned char UART_CNT      =   0;
                 ;//unsigned char txCnt = 0;
                 ;//unsigned char ERROR_STR[20];
                 ;
                 ;unsigned char       Tmr_Cnt         =   0;
                 ;unsigned char       RS232_RS_Limit  =   6;      // 1 = 5ms, 2 = 10ms, 5 = 25ms
                 ;#include "PORT_INIT.c"
                 ;/**************************************************************************************
                 ;
                 ;		02. Ports initialization
                 ;
                 ;*************************************************************************************/
                 ;
                 ;void PORT_INIT()
                 ; 0000 000F {
                 
                 	.CSEG
                 _PORT_INIT:
                 ; .FSTART _PORT_INIT
                 ;		// Crystal Oscillator division factor: 1
                 ;
                 ;#pragma optsize-
                 ;    CLKPR=(1<<CLKPCE);
000053 e8e0      	LDI  R30,LOW(128)
000054 bde6      	OUT  0x26,R30
                 ;    CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000055 e0e0      	LDI  R30,LOW(0)
000056 bde6      	OUT  0x26,R30
                 ;#ifdef _OPTIMIZE_SIZE_
                 ;#pragma optsize+
                 ;#endif
                 ;
                 ;
                 ;			// PORT
                 ;			DDRA=(0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000057 bbea      	OUT  0x1A,R30
                 ;			PORTA=(0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000058 bbeb      	OUT  0x1B,R30
                 ;
                 ;
                 ;			DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000059 efef      	LDI  R30,LOW(255)
00005a bbe7      	OUT  0x17,R30
                 ;			PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00005b e0e0      	LDI  R30,LOW(0)
00005c bbe8      	OUT  0x18,R30
                 ;
                 ;			DDRD=(0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00005d bbe1      	OUT  0x11,R30
                 ;			PORTD=(0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00005e bbe2      	OUT  0x12,R30
                 ;
                 ;
                 ;			// USART initialization
                 ;			// Communication Parameters: 8 Data, 1 Stop, No Parity
                 ;			// USART Receiver: On
                 ;			// USART Transmitter: On
                 ;			// USART Mode: Asynchronous
                 ;			// USART Baud Rate: 9600
                 ;
                 ;			// X-TAL 20MHz Setting
                 ;			UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00005f b9eb      	OUT  0xB,R30
                 ;            UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000060 e9e8      	LDI  R30,LOW(152)
000061 b9ea      	OUT  0xA,R30
                 ;            UCSRC=(0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000062 e0e6      	LDI  R30,LOW(6)
000063 b9e3      	OUT  0x3,R30
                 ;            UBRRH=0x00;
000064 e0e0      	LDI  R30,LOW(0)
000065 b9e2      	OUT  0x2,R30
                 ;            UBRRL=0x81;      // Crystal 20MHz Setting
000066 e8e1      	LDI  R30,LOW(129)
000067 b9e9      	OUT  0x9,R30
                 ;
                 ;
                 ;            /* 8MHz Setting */  /*
                 ;            UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
                 ;            UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
                 ;            UCSRC=(0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
                 ;            UBRRH=0x00;
                 ;            UBRRL=0x33;
                 ;            */
                 ;
                 ;
                 ;             // Timer/Counter 1 initialization
                 ;            // Clock source: System Clock
                 ;            // Clock value: 2500.000 kHz
                 ;            // Mode: Normal top=0xFFFF
                 ;            // OC1A output: Disconnected
                 ;            // OC1B output: Disconnected
                 ;            // Noise Canceler: Off
                 ;            // Input Capture on Rising Edge
                 ;            // Timer Period: 5 ms
                 ;            // Timer1 Overflow Interrupt: On
                 ;            // Input Capture Interrupt: Off
                 ;            // Compare A Match Interrupt: Off
                 ;            // Compare B Match Interrupt: Off
                 ;
                 ;            TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000068 e0e0      	LDI  R30,LOW(0)
000069 bdef      	OUT  0x2F,R30
                 ;            TCCR1B=(0<<ICNC1) | (1<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
00006a e4e2      	LDI  R30,LOW(66)
00006b bdee      	OUT  0x2E,R30
                 ;            TCNT1H=0xCF;
00006c d0e2      	RCALL SUBOPT_0x0
                 ;            TCNT1L=0x2C;
                 ;            ICR1H=0x00;
00006d e0e0      	LDI  R30,LOW(0)
00006e bde5      	OUT  0x25,R30
                 ;            ICR1L=0x00;
00006f bde4      	OUT  0x24,R30
                 ;            OCR1AH=0x00;
000070 bdeb      	OUT  0x2B,R30
                 ;            OCR1AL=0x00;
000071 bdea      	OUT  0x2A,R30
                 ;            OCR1BH=0x00;
000072 bde9      	OUT  0x29,R30
                 ;            OCR1BL=0x00;
000073 bde8      	OUT  0x28,R30
                 ;
                 ;}
000074 9508      	RET
                 ; .FEND
                 ;#include "TMR.c"
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0010 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000075 920a      	ST   -Y,R0
000076 921a      	ST   -Y,R1
000077 92fa      	ST   -Y,R15
000078 936a      	ST   -Y,R22
000079 937a      	ST   -Y,R23
00007a 938a      	ST   -Y,R24
00007b 939a      	ST   -Y,R25
00007c 93aa      	ST   -Y,R26
00007d 93ba      	ST   -Y,R27
00007e 93ea      	ST   -Y,R30
00007f 93fa      	ST   -Y,R31
000080 b7ef      	IN   R30,SREG
000081 93ea      	ST   -Y,R30
                 ;    // Reinitialize Timer1 value
                 ;    //TCNT1H=0xCF2C >> 8;
                 ;    //TCNT1L=0xCF2C & 0xff;
                 ;    TCNT1H=0xCF;
000082 d0cc      	RCALL SUBOPT_0x0
                 ;    TCNT1L=0x2C;
                 ;
                 ;    // Place your code here
                 ;    if(RS232_FLAG)
000083 9998      	SBIC 0x13,0
                 ;    {
                 ;        Tmr_Cnt++;
000084 9443      	INC  R4
                 ;    }
                 ;
                 ;    if(RS232_FLAG && (Tmr_Cnt >= RS232_RS_Limit))
000085 9b98      	SBIS 0x13,0
000086 c002      	RJMP _0x6
000087 1447      	CP   R4,R7
000088 f408      	BRSH _0x7
                 _0x6:
000089 c001      	RJMP _0x5
                 _0x7:
                 ;    {
                 ;       Clear_Set();
00008a d04c      	RCALL _Clear_Set
                 ;    }
                 ;
                 ;}
                 _0x5:
00008b 91e9      	LD   R30,Y+
00008c bfef      	OUT  SREG,R30
00008d 91f9      	LD   R31,Y+
00008e 91e9      	LD   R30,Y+
00008f 91b9      	LD   R27,Y+
000090 91a9      	LD   R26,Y+
000091 9199      	LD   R25,Y+
000092 9189      	LD   R24,Y+
000093 9179      	LD   R23,Y+
000094 9169      	LD   R22,Y+
000095 90f9      	LD   R15,Y+
000096 9019      	LD   R1,Y+
000097 9009      	LD   R0,Y+
000098 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;#include "UART.c"
                 ;	/********************************************************************
                 ;
                 ;		UART
                 ;
                 ;	********************************************************************/
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 16
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;//bit rx_buffer_overflow;
                 ;
                 ;
                 ;void putchar0(char c)
                 ; 0000 0011 {
                 ;    while ((UCSRA & DATA_REGISTER_EMPTY)==0);
                 ;	c -> Y+0
                 ;    UDR=c;
                 ;}
                 ;
                 ;
                 ;void putString0(char *c)
                 ;{
                 _putString0:
                 ; .FSTART _putString0
                 ;    unsigned char PcCnt = 0;
                 ;
                 ;
                 ;    for(PcCnt = 0; PcCnt <= 8 ; PcCnt++)
000099 93aa      	ST   -Y,R26
00009a 931a      	ST   -Y,R17
                 ;	*c -> Y+1
                 ;	PcCnt -> R17
00009b e010      	LDI  R17,0
00009c e010      	LDI  R17,LOW(0)
                 _0xC:
00009d 3019      	CPI  R17,9
00009e f448      	BRSH _0xD
                 ;    {
                 ;        while ((UCSRA & DATA_REGISTER_EMPTY)==0);
                 _0xE:
00009f 9b5d      	SBIS 0xB,5
0000a0 cffe      	RJMP _0xE
                 ;        UDR=c[PcCnt];
0000a1 2fe1      	MOV  R30,R17
0000a2 81a9      	LDD  R26,Y+1
0000a3 0fae      	ADD  R26,R30
0000a4 91ec      	LD   R30,X
0000a5 b9ec      	OUT  0xC,R30
                 ;    }
0000a6 5f1f      	SUBI R17,-1
0000a7 cff5      	RJMP _0xC
                 _0xD:
                 ;
                 ;
                 ;    /*
                 ;    for(PcCnt= 0 ; PcCnt < (sizeof(c)/sizeof(c[0])); PcCnt++)
                 ;    {
                 ;        while ((UCSRA & DATA_REGISTER_EMPTY)==0);
                 ;        UDR=c[PcCnt];
                 ;    }
                 ;     */
                 ;}
0000a8 c070      	RJMP _0x2060001
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ;{
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0000a9 93ea      	ST   -Y,R30
0000aa b7ef      	IN   R30,SREG
0000ab 93ea      	ST   -Y,R30
                 ;		char status,data;
                 ;		status=UCSRA;
0000ac d0b1      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
0000ad b11b      	IN   R17,11
                 ;		data=UDR;
0000ae b10c      	IN   R16,12
                 ;
                 ;		if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000af 2fe1      	MOV  R30,R17
0000b0 71ec      	ANDI R30,LOW(0x1C)
0000b1 f4f9      	BRNE _0x11
                 ;		   {
                 ;					UART0_DATA=data;
0000b2 2e30      	MOV  R3,R16
                 ;                    //putchar0(UART0_DATA);
                 ;
                 ;                    //  if(UART0_DATA =="STX" )                                          // UART0_DATA啊 STX 老 版快....
                 ;                    //  if(UART0_DATA == 0x02)
                 ;                    if(UART0_DATA == 0x1B)
0000b3 e1eb      	LDI  R30,LOW(27)
0000b4 15e3      	CP   R30,R3
0000b5 f419      	BRNE _0x12
                 ;                      {
                 ;                              Tmr_Cnt = 0;
0000b6 2444      	CLR  R4
                 ;                              NDX_232 = 0;
0000b7 2422      	CLR  R2
                 ;                              RS232_FLAG = 1;
0000b8 9a98      	SBI  0x13,0
                 ;                      }
                 ;
                 ;                      if(RS232_FLAG)
                 _0x12:
0000b9 9b98      	SBIS 0x13,0
0000ba c015      	RJMP _0x15
                 ;                      {
                 ;                            //if(UART0_DATA == 0x02)
                 ;                              if(UART0_DATA == 0x1B)
0000bb e1eb      	LDI  R30,LOW(27)
0000bc 15e3      	CP   R30,R3
0000bd f009      	BREQ _0x39
                 ;                              {
                 ;                                      RS232_BUFF[NDX_232] =   UART0_DATA;
                 ;                              }
                 ;                              else
                 ;                              {
                 ;                                      RS232_BUFF[++NDX_232] =   UART0_DATA;
0000be 9423      	INC  R2
                 _0x39:
0000bf 2de2      	MOV  R30,R2
0000c0 58e0      	SUBI R30,-LOW(_RS232_BUFF)
0000c1 8230      	ST   Z,R3
                 ;                              }
                 ;
                 ;
                 ;                              //if(UART0_DATA ==  0x03 && NDX_232 == 4)
                 ;                              if((UART0_DATA ==  0x0D && NDX_232 == 5) || (UART0_DATA == 0x0D && NDX_232 == 8))
0000c2 e0ed      	LDI  R30,LOW(13)
0000c3 15e3      	CP   R30,R3
0000c4 f419      	BRNE _0x19
0000c5 e0e5      	LDI  R30,LOW(5)
0000c6 15e2      	CP   R30,R2
0000c7 f039      	BREQ _0x1B
                 _0x19:
0000c8 e0ed      	LDI  R30,LOW(13)
0000c9 15e3      	CP   R30,R3
0000ca f419      	BRNE _0x1C
0000cb e0e8      	LDI  R30,LOW(8)
0000cc 15e2      	CP   R30,R2
0000cd f009      	BREQ _0x1B
                 _0x1C:
0000ce c001      	RJMP _0x18
                 _0x1B:
                 ;                              {
                 ;                                        RS_Finish_Flag = 1;
0000cf 9a99      	SBI  0x13,1
                 ;									  	//RS232_FLAG = 0;
                 ;                                        //NDX_232 = 0;
                 ;                              }	        // END of if(惑怕夸没, 肚绰 炼疙 惑怕函版 老 版快)
                 ;
                 ;                      }	                // END of  if(RS232_FLAG)
                 _0x18:
                 ;
                 ;                    UART0_DATA = 0;
                 _0x15:
0000d0 2433      	CLR  R3
                 ;
                 ;	   }	        // END of if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 ;}                       // END of 	interrupt [USART_RXC] void usart_rx_isr(void)
                 _0x11:
0000d1 9109      	LD   R16,Y+
0000d2 9119      	LD   R17,Y+
0000d3 91e9      	LD   R30,Y+
0000d4 bfef      	OUT  SREG,R30
0000d5 91e9      	LD   R30,Y+
0000d6 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void Clear_Set()
                 ; 0000 0015 {
                 _Clear_Set:
                 ; .FSTART _Clear_Set
                 ; 0000 0016 	memset(RS232_BUFF,0x00,sizeof(RS232_BUFF));             //Buff 檬扁拳
0000d7 e8e0      	LDI  R30,LOW(_RS232_BUFF)
0000d8 93ea      	ST   -Y,R30
0000d9 e0e0      	LDI  R30,LOW(0)
0000da 93ea      	ST   -Y,R30
0000db e0aa      	LDI  R26,LOW(10)
0000dc d065      	RCALL _memset
                 ; 0000 0017 	RS_Finish_Flag = 0;
0000dd 9899      	CBI  0x13,1
                 ; 0000 0018     RS232_FLAG = 0;
0000de 9898      	CBI  0x13,0
                 ; 0000 0019 	Tmr_Cnt = 0;
0000df 2444      	CLR  R4
                 ; 0000 001A     NDX_232 = 0;
0000e0 2422      	CLR  R2
                 ; 0000 001B }
0000e1 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void CHK_Light()
                 ; 0000 0020 {
                 _CHK_Light:
                 ; .FSTART _CHK_Light
                 ; 0000 0021         unsigned char cnt = 0;
                 ; 0000 0022 
                 ; 0000 0023         rtnMsg[4] = PINB.0 ;   // PORTB.0(R) 阑 佬绢 rtnMsg[4]俊 历厘
0000e2 931a      	ST   -Y,R17
                 ;	cnt -> R17
0000e3 e010      	LDI  R17,0
0000e4 e0e0      	LDI  R30,0
0000e5 99b0      	SBIC 0x16,0
0000e6 e0e1      	LDI  R30,1
                +
0000e7 93e0 008e+STS _rtnMsg + ( 4 ) , R30
                 	__PUTB1MN _rtnMsg,4
                 ; 0000 0024         rtnMsg[5] = PINB.1;   // PORTB.1(G) 阑 佬绢 rtnMsg[5]俊 历厘
0000e9 e0e0      	LDI  R30,0
0000ea 99b1      	SBIC 0x16,1
0000eb e0e1      	LDI  R30,1
                +
0000ec 93e0 008f+STS _rtnMsg + ( 5 ) , R30
                 	__PUTB1MN _rtnMsg,5
                 ; 0000 0025         rtnMsg[6] = PINB.2;   // PORTB.2(B) 阑 佬绢 rtnMsg[6]俊 历厘
0000ee e0e0      	LDI  R30,0
0000ef 99b2      	SBIC 0x16,2
0000f0 e0e1      	LDI  R30,1
                +
0000f1 93e0 0090+STS _rtnMsg + ( 6 ) , R30
                 	__PUTB1MN _rtnMsg,6
                 ; 0000 0026 
                 ; 0000 0027 
                 ; 0000 0028         for(cnt = 4 ; cnt <= 6 ; cnt++)
0000f3 e014      	LDI  R17,LOW(4)
                 _0x26:
0000f4 3017      	CPI  R17,7
0000f5 f458      	BRSH _0x27
                 ; 0000 0029         {
                 ; 0000 002A             if(rtnMsg[cnt])
0000f6 e8aa      	LDI  R26,LOW(_rtnMsg)
0000f7 0fa1      	ADD  R26,R17
0000f8 91ec      	LD   R30,X
0000f9 30e0      	CPI  R30,0
0000fa f021      	BREQ _0x28
                 ; 0000 002B             {
                 ; 0000 002C                 rtnMsg[cnt] = 0xFF;
0000fb e8aa      	LDI  R26,LOW(_rtnMsg)
0000fc 0fa1      	ADD  R26,R17
0000fd efef      	LDI  R30,LOW(255)
0000fe 93ec      	ST   X,R30
                 ; 0000 002D             }
                 ; 0000 002E 
                 ; 0000 002F             //putchar0(rtnMsg[cnt]);
                 ; 0000 0030         }
                 _0x28:
0000ff 5f1f      	SUBI R17,-1
000100 cff3      	RJMP _0x26
                 _0x27:
                 ; 0000 0031 
                 ; 0000 0032         putString0(rtnMsg);    // 炼疙惑怕 傈价
000101 e8aa      	LDI  R26,LOW(_rtnMsg)
000102 df96      	RCALL _putString0
                 ; 0000 0033 }
000103 9119      	LD   R17,Y+
000104 9508      	RET
                 ; .FEND
                 ;
                 ;void SELECT_Light(unsigned char *USER_SELECT)
                 ; 0000 0036 {
                 _SELECT_Light:
                 ; .FSTART _SELECT_Light
                 ; 0000 0037         unsigned char PORT_DATA = 0;
                 ; 0000 0038 
                 ; 0000 0039         if(USER_SELECT[4]) PORT_DATA += 1;      // R Color
000105 93aa      	ST   -Y,R26
000106 931a      	ST   -Y,R17
                 ;	*USER_SELECT -> Y+1
                 ;	PORT_DATA -> R17
000107 e010      	LDI  R17,0
000108 81e9      	LDD  R30,Y+1
000109 81e4      	LDD  R30,Z+4
00010a 30e0      	CPI  R30,0
00010b f009      	BREQ _0x29
00010c 5f1f      	SUBI R17,-LOW(1)
                 ; 0000 003A 
                 ; 0000 003B         if(USER_SELECT[5]) PORT_DATA += 2;      // G Color
                 _0x29:
00010d 81e9      	LDD  R30,Y+1
00010e 81e5      	LDD  R30,Z+5
00010f 30e0      	CPI  R30,0
000110 f009      	BREQ _0x2A
000111 5f1e      	SUBI R17,-LOW(2)
                 ; 0000 003C 
                 ; 0000 003D         if(USER_SELECT[6]) PORT_DATA += 4;      // B Color
                 _0x2A:
000112 81e9      	LDD  R30,Y+1
000113 81e6      	LDD  R30,Z+6
000114 30e0      	CPI  R30,0
000115 f009      	BREQ _0x2B
000116 5f1c      	SUBI R17,-LOW(4)
                 ; 0000 003E 
                 ; 0000 003F         PORTB = PORT_DATA;
                 _0x2B:
000117 bb18      	OUT  0x18,R17
                 ; 0000 0040 
                 ; 0000 0041         //putchar0(PORT_DATA);
                 ; 0000 0042 
                 ; 0000 0043         CHK_Light();      // 炼疙惑怕 傈价
000118 dfc9      	RCALL _CHK_Light
                 ; 0000 0044 }
                 _0x2060001:
000119 8118      	LDD  R17,Y+0
00011a 9622      	ADIW R28,2
00011b 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0048 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0049         unsigned char lcnt = 0;
                 ; 0000 004A         PORT_INIT();
                 ;	lcnt -> R17
00011c e010      	LDI  R17,0
00011d df35      	RCALL _PORT_INIT
                 ; 0000 004B 
                 ; 0000 004C         #asm("sei");         // 傈眉 牢磐反飘 倾侩
00011e 9478      	sei
                 ; 0000 004D 
                 ; 0000 004E         PORTB = 0xFF;
00011f efef      	LDI  R30,LOW(255)
000120 bbe8      	OUT  0x18,R30
                 ; 0000 004F         delay_ms(250);
000121 efaa      	LDI  R26,LOW(250)
000122 e0b0      	LDI  R27,0
000123 d030      	RCALL _delay_ms
                 ; 0000 0050 
                 ; 0000 0051         for(lcnt = 1; lcnt <= 8; lcnt++)
000124 e011      	LDI  R17,LOW(1)
                 _0x2D:
000125 3019      	CPI  R17,9
000126 f430      	BRSH _0x2E
                 ; 0000 0052         {
                 ; 0000 0053             PORTB = lcnt;
000127 bb18      	OUT  0x18,R17
                 ; 0000 0054             delay_ms(150);
000128 e9a6      	LDI  R26,LOW(150)
000129 e0b0      	LDI  R27,0
00012a d029      	RCALL _delay_ms
                 ; 0000 0055         }
00012b 5f1f      	SUBI R17,-1
00012c cff8      	RJMP _0x2D
                 _0x2E:
                 ; 0000 0056 
                 ; 0000 0057         PORTB = default_Color;
00012d ba58      	OUT  0x18,R5
                 ; 0000 0058 
                 ; 0000 0059 
                 ; 0000 005A     while (1)
                 _0x2F:
                 ; 0000 005B     {
                 ; 0000 005C                  // Place your code here
                 ; 0000 005D 				if(RS_Finish_Flag)
00012e 9b99      	SBIS 0x13,1
00012f c010      	RJMP _0x32
                 ; 0000 005E 				{
                 ; 0000 005F                     switch (RS232_BUFF[2])
                +
000130 91e0 0082+LDS R30 , _RS232_BUFF + ( 2 )
                 	__GETB1MN _RS232_BUFF,2
000132 e0f0      	LDI  R31,0
                 ; 0000 0060                     {
                 ; 0000 0061                         case 0x53 :     // 惑怕夸没
000133 35e3      	CPI  R30,LOW(0x53)
000134 e0a0      	LDI  R26,HIGH(0x53)
000135 07fa      	CPC  R31,R26
000136 f411      	BRNE _0x36
                 ; 0000 0062                             CHK_Light();
000137 dfaa      	RCALL _CHK_Light
                 ; 0000 0063                             break;
000138 c006      	RJMP _0x35
                 ; 0000 0064 
                 ; 0000 0065                         case 0x43 :    // 炼疙函版
                 _0x36:
000139 34e3      	CPI  R30,LOW(0x43)
00013a e0a0      	LDI  R26,HIGH(0x43)
00013b 07fa      	CPC  R31,R26
00013c f411      	BRNE _0x35
                 ; 0000 0066                             SELECT_Light(RS232_BUFF);
00013d e8a0      	LDI  R26,LOW(_RS232_BUFF)
00013e dfc6      	RCALL _SELECT_Light
                 ; 0000 0067                             break;
                 ; 0000 0068                     };
                 _0x35:
                 ; 0000 0069 
                 ; 0000 006A                     Clear_Set();
00013f df97      	RCALL _Clear_Set
                 ; 0000 006B 
                 ; 0000 006C 				}
                 ; 0000 006D 
                 ; 0000 006E     }
                 _0x32:
000140 cfed      	RJMP _0x2F
                 ; 0000 006F }
                 _0x38:
000141 cfff      	RJMP _0x38
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000142 93aa      	ST   -Y,R26
000143 81a8          ld   r26,y
000144 23aa          tst  r26
000145 f031          breq memset1
000146 27ff          clr  r31
000147 81ea          ldd  r30,y+2
000148 8169          ldd  r22,y+1
                 memset0:
000149 9361          st   z+,r22
00014a 95aa          dec  r26
00014b f7e9          brne memset0
                 memset1:
00014c 81ea          ldd  r30,y+2
00014d 9623      	ADIW R28,3
00014e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _RS232_BUFF:
000080           	.BYTE 0xA
                 _rtnMsg:
00008a           	.BYTE 0x9
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00014f ecef      	LDI  R30,LOW(207)
000150 bded      	OUT  0x2D,R30
000151 e2ec      	LDI  R30,LOW(44)
000152 bdec      	OUT  0x2C,R30
000153 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000154 9610      	adiw r26,0
000155 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000156 e888     +LDI R24 , LOW ( 0x1388 )
000157 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000158 9701     +SBIW R24 , 1
000159 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
00015a 95a8      	wdr
00015b 9711      	sbiw r26,1
00015c f7c9      	brne __delay_ms0
                 __delay_ms1:
00015d 9508      	ret
                 
                 __SAVELOCR2:
00015e 931a      	ST   -Y,R17
00015f 930a      	ST   -Y,R16
000160 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313 register use summary:
r0 :   6 r1 :   3 r2 :   6 r3 :   7 r4 :   4 r5 :   1 r6 :   0 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   4 r17:  30 r18:   0 r19:   0 r20:   0 r21:   0 r22:   6 r23:   2 
r24:  11 r25:   4 r26:  28 r27:   5 r28:   3 r29:   0 r30: 116 r31:   7 
x  :   6 y  :  50 z  :  12 
Registers used: 22 out of 35 (62.9%)

ATtiny2313 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   3 
adiw  :   3 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  10 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   2 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   7 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   7 
cpc   :   2 cpi   :   9 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   2 ld    :  20 ldd   :  11 ldi   :  59 lds   :   1 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   4 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  36 
pop   :   0 push  :   0 rcall :  13 ret   :   8 reti  :   2 rjmp  :  34 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   2 sbic  :   4 
sbis  :   4 sbiw  :   4 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  30 std   :   0 
sts   :   3 sub   :   0 subi  :   7 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 37 out of 114 (32.5%)

ATtiny2313 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002c2    658     48    706    2048  34.5%
[.dseg] 0x000060 0x000093      0     19     19     128  14.8%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 6 warnings
